#!/usr/bin/env ruby
# EventMachine consumer for a bitly decode stream
# For example, http://bitly.measuredvoice.com/usa.gov
# See http://www.usa.gov/About/developer_resources/developers.shtml for more info

require 'rubygems'
require 'em-http'
require 'json'
require 'thread'

['socrata'].each do |lib|
  require File.join(File.dirname(__FILE__), "../lib/#{lib}")
end

$stderr.puts Time.now.to_s + " Loading configuration..."
CONFIG = YAML.load_file(ARGV[0])[ENV["RACK_ENV"] || "production"]

#Settings for connection to bitly decode stream
http_options = {
  :connect_timeout => CONFIG["connect_timeout"],
  :inactivity_timeout => CONFIG["session_timeout"]
}
stream_url = CONFIG["feed_url"]

#Set up new object to write data to Socrata
socrata = Socrata.new({
  :domain => CONFIG["domain"],
  :username => CONFIG["username"],
  :password => CONFIG["password"],
  :app_token => CONFIG["app_token"]
 })
exitcode = 0

#main loop
while exitcode < 400 or exitcode > 499 do 
    $stderr.puts Time.now.to_s + " Starting up EventMachine..."
	EM.run 	do

	  buffer = ""
	  links = []
	  links_semaphore = Mutex.new
	  prev_batchsize = 0
	  last_event = Time.now
	
	  # Follow the bit.ly stream...
	  $stderr.puts Time.now.to_s + " Connecting to stream..."
	  http = EventMachine::HttpRequest.new(stream_url, http_options).get
	
	  http.errback {
	    $stderr.puts Time.now.to_s + " connection error..."
	    exitcode = 
	    EM.stop
	  }
	
	  http.callback {
		$stderr.puts Time.now.to_s + " connection closed, http status #{http.response_header.status.to_s}..."
		exitcode = http.response_header.status
		EM.stop
	  }
	
	  http.stream do |chunk|
		buffer += chunk
		while line = buffer.slice!(/.+\r?\n/)
		  begin
			link = JSON.parse(line.strip)
			if !link.nil?
			  links_semaphore.synchronize {
				links << link
	
				# Store away our new batch size and timestamp, so we can track when we last saw
				# an event
				prev_batchsize = links.size
				last_event = Time.now
			  }
	
			end
		  rescue JSON::ParserError => e
			# Swallow your pride...
		  end
		end
	  end
	
#	  http.disconnect do
#		$stderr.puts Time.now.to_s + " Lost connection; restarting"
#		EM.stop
#	  end
	
	  # Periodically flush the queue to the API
	  EM.add_periodic_timer(CONFIG["check_time"]) do
		links_semaphore.synchronize do
		  if links.count < CONFIG["batch_size"]
			# Check to see if it's been too long with us stuck at this batch size
			# if((links.count == 0 || links.count == prev_batchsize) && Time.now - last_event > CONFIG["stuck_time"])
			#   $stderr.puts Time.now.to_s + " Connection stuck, committing sepuku..."
			#   exitcode = 200
			#   EM.stop
			#end
	
			$stderr.puts Time.now.to_s + " Batch too small (#{links.count}), skipping..."
		  else
			$stderr.puts Time.now.to_s + " Processing batch of #{links.count}..."
			begin
			  postedhashes = ""
			  socrata.batch do
				while link = links.shift
				  payload = {
					"Short URL" => {"url" => "http:\/\/" + link["hh"] + "\/#{link["g"]}"},
					"User Agent" => link["a"],
					"Country Code" => link["c"],
					"Known User" => (link["nk"] == 1),
					"Global Bitly Hash" => link["g"],
					"User Bitly Hash" => link["h"],
					"User Login" => link["l"],
					"Short URL CNAME" => link["hh"],
					"Referring URL" => (link["r"] == "direct" ? nil : {"url" => link["r"]}),
					"Long URL" => {"url" => link["u"]},
					"Timestamp" => link["t"],
					"Geo Region" => link["gr"],
					"City" => link["cy"],
					"Timezone" => link["tz"],
					"Hash Timestamp" => link["hc"],
					"Language" => link["al"]
				  }
	
				  if !link["ll"].blank?
					payload["Location"] = {"latitude" => link["ll"][0], "longitude" => link["ll"][1]}
				  end
	
				  # Clear out null values
				  payload = payload.delete_if {|k, v| v.nil?}
	
				  #puts "New Row: #{payload.inspect}"
				  socrata.post("/api/views/#{CONFIG["dataset"]}/rows.json", {:body => payload.to_json})
				  postedhashes << "#{link["g"]} "
				end
			  end
			  $stderr.puts Time.now.to_s + " Wrote " + postedhashes
			  # Reset last batch
			  prev_batchsize = 0
			  last_event = Time.now
			rescue Exception => e
			  $stderr.puts Time.now.to_s + " Error in batch: #{e}: #{e.backtrace.join("\n")}}"
			end
		  end
		end
	  end
	end
	$stderr.puts Time.now.to_s + " ----------------- \007"
	$stderr.puts Time.now.to_s + " EventMachine stopped with exitcode " + exitcode.to_s
end